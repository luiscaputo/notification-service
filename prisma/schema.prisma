generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminPages {
  id                String              @id(map: "PK_admin_page") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  page              String              @db.VarChar
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @default(now()) @db.Timestamptz(6)
  CompanyAdminPages CompanyAdminPages[]
  UserAdminPages    UserAdminPages[]
}

model City {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  codeIbge   Int?
  stateId    Int?
  population Int?
  density    Int?
  gentle     String?  @db.VarChar(255)
  area       Int?
  createdAt  DateTime @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)
  State      State?   @relation(fields: [stateId], references: [id], onDelete: Cascade)
}

model Company {
  id                             Int                 @id @default(autoincrement())
  headquarterId                  Int?
  name                           String              @unique @db.VarChar(255)
  description                    String?             @db.VarChar(255)
  trandingName                   String              @unique @db.VarChar(255)
  status                         Int                 @default(1)
  cnpj                           String?             @db.VarChar(255)
  zipCode                        String?             @db.VarChar(255)
  address                        String?             @db.VarChar(255)
  number                         String?             @db.VarChar(255)
  complement                     String?             @db.VarChar(255)
  state                          String?             @db.VarChar(255)
  district                       String?             @db.VarChar(255)
  cityId                         Int?
  phone                          String?             @db.VarChar(255)
  createdAt                      DateTime            @db.Timestamptz(6)
  updatedAt                      DateTime            @db.Timestamptz(6)
  responsible                    Int?
  rulesId                        String?             @db.Uuid
  Company                        Company?            @relation("CompanyToCompany", fields: [headquarterId], references: [id], onDelete: Cascade, map: "Company_headquarter_fkey")
  other_Company                  Company[]           @relation("CompanyToCompany")
  User_Company_responsibleToUser User?               @relation("Company_responsibleToUser", fields: [responsible], references: [id], onDelete: Cascade)
  CompanyRules                   CompanyRules?       @relation(fields: [rulesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  CompanyAdminPages              CompanyAdminPages[]
  CompanyDomains                 CompanyDomains[]
  Contacts                       Contacts[]
  CostCentre                     CostCentre[]
  Justify                        Justify[]
  Policy                         Policy[]
  Project                        Project[]
  RoleCompany                    RoleCompany[]
  TripeeMobCompany               TripeeMobCompany[]
  User_User_companyIdToCompany   User[]              @relation("User_companyIdToCompany")
}

model CompanyAdminPages {
  id          String     @id(map: "PK_company_admin_page") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  companyId   Int
  adminPageId String     @db.Uuid
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(6)
  AdminPages  AdminPages @relation(fields: [adminPageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_company_admin_page_admin_page_id")
  Company     Company    @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_company_admin_page_company_id")
}

model CompanyDomains {
  id        String   @id(map: "pk_company_domains_id") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  companyId Int
  domain    String   @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_domains_company_id")
}

model CompanyRules {
  id                  String    @id @db.Uuid
  modalities          String[]  @db.VarChar
  createdAt           DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime  @default(now()) @db.Timestamptz(6)
  adminReadOnly       Boolean?  @default(true)
  adminLooker         String?   @db.VarChar
  adminLookerSales    String?   @db.VarChar
  estimateLimit       Int?      @db.SmallInt
  estimatePlayerLimit Int?      @db.SmallInt
  Company             Company[]
}

model Contacts {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String?  @db.VarChar(255)
  cellphone String?  @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  email     String?  @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CostCentre {
  id                  Int                   @id @default(autoincrement())
  companyId           Int
  responsible         Int?
  cdcParent           Int?
  name                String                @db.VarChar(255)
  description         String                @db.VarChar(255)
  principal           Boolean
  status              Int
  priceLimit          String                @db.VarChar(255)
  totalRides          String                @db.VarChar(255)
  projectEnable       Boolean
  justifyEnable       Boolean
  behavior            String                @db.VarChar(255)
  exceptionValue      String                @db.VarChar(255)
  notificationType    String                @db.VarChar(255)
  createdAt           DateTime              @db.Timestamptz(6)
  updatedAt           DateTime              @db.Timestamptz(6)
  CostCentre          CostCentre?           @relation("CostCentreToCostCentre", fields: [cdcParent], references: [id], onDelete: Cascade)
  other_CostCentre    CostCentre[]          @relation("CostCentreToCostCentre")
  Company             Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User                User?                 @relation(fields: [responsible], references: [id], onDelete: Cascade)
  CostCentreJustify   CostCentreJustify[]
  CostCentrePolicy    CostCentrePolicy[]
  CostCentreProject   CostCentreProject[]
  TripeeMobCostCentre TripeeMobCostCentre[]
  UserCostCentre      UserCostCentre[]
}

model CostCentreJustify {
  id           Int        @id @default(autoincrement())
  costCentreId Int
  justifyId    Int
  createdAt    DateTime   @db.Timestamptz(6)
  updatedAt    DateTime   @db.Timestamptz(6)
  CostCentre   CostCentre @relation(fields: [costCentreId], references: [id], onDelete: Cascade)
  Justify      Justify    @relation(fields: [justifyId], references: [id], onDelete: Cascade)
}

model CostCentrePolicy {
  id           Int        @id @default(autoincrement())
  costCentreId Int
  policyId     Int
  createdAt    DateTime   @db.Timestamptz(6)
  updatedAt    DateTime   @db.Timestamptz(6)
  CostCentre   CostCentre @relation(fields: [costCentreId], references: [id], onDelete: Cascade)
  Policy       Policy     @relation(fields: [policyId], references: [id], onDelete: Cascade)
}

model CostCentreProject {
  id           Int         @id @default(autoincrement())
  costCentreId Int?
  projectId    Int
  createdAt    DateTime    @db.Timestamptz(6)
  updatedAt    DateTime    @db.Timestamptz(6)
  CostCentre   CostCentre? @relation(fields: [costCentreId], references: [id], onDelete: Cascade)
  Project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Favorites {
  id           Int       @id(map: "Favorites_PK") @default(autoincrement())
  userId       Int
  name         String    @db.VarChar(255)
  placeId      String    @db.VarChar(255)
  address      String    @db.VarChar(255)
  shortAddress String    @db.VarChar(255)
  latitude     Float
  longitude    Float
  lastAccess   DateTime? @db.Timestamptz(6)
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @db.Timestamptz(6)
  district     String?   @db.VarChar
  city         String?   @db.VarChar
  state        String?   @db.VarChar
  zipcode      String?   @db.VarChar
  User         User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Favorites_User_FK")
}

model Justify {
  id                Int                 @id @default(autoincrement())
  companyId         Int
  description       String?             @db.VarChar(255)
  status            Int?
  createdAt         DateTime            @db.Timestamptz(6)
  updatedAt         DateTime            @db.Timestamptz(6)
  CostCentreJustify CostCentreJustify[]
  Company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  TripeeMobJustify  TripeeMobJustify[]
}

model Policy {
  id               Int                @id @default(autoincrement())
  companyId        Int
  name             String?            @db.VarChar(255)
  rules            Json?              @db.Json
  createdAt        DateTime           @db.Timestamptz(6)
  updatedAt        DateTime           @db.Timestamptz(6)
  description      String?            @db.VarChar(255)
  CostCentrePolicy CostCentrePolicy[]
  Company          Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  RolePolicy       RolePolicy[]
  User             User[]
}

model Project {
  id                Int                 @id @default(autoincrement())
  companyId         Int
  name              String?             @db.VarChar(255)
  description       String?             @db.VarChar(255)
  status            Int?
  createdAt         DateTime            @db.Timestamptz(6)
  updatedAt         DateTime            @db.Timestamptz(6)
  CostCentreProject CostCentreProject[]
  Company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  TripeeMobProject  TripeeMobProject[]
}

model RoleCompany {
  id        Int      @id @default(autoincrement())
  roleId    Int
  companyId Int
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Roles     Roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model RolePolicy {
  id        Int      @id @default(autoincrement())
  roleId    Int
  policyId  Int
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Policy    Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  Roles     Roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Roles {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  createdAt   DateTime      @db.Timestamptz(6)
  updatedAt   DateTime      @db.Timestamptz(6)
  RoleCompany RoleCompany[]
  RolePolicy  RolePolicy[]
  User        User[]
}

model SelfRegisterLog {
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "SelfRegisterLog_userid_key")
  status String  @db.VarChar(255)
  error  String? @db.VarChar
  User   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "SelfRegisterLog_id_fkey")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model State {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  initials  String?  @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  City      City[]
}

model TripeeMobCompany {
  id              Int      @id @default(autoincrement())
  tripeeCompanyId Int
  mobCompanyId    Int
  createdAt       DateTime @db.Timestamptz(6)
  updatedAt       DateTime @db.Timestamptz(6)
  Company         Company  @relation(fields: [tripeeCompanyId], references: [id], onDelete: Cascade)
}

model TripeeMobCostCentre {
  id                 Int        @id @default(autoincrement())
  tripeeCostCentreId Int
  mobCostCentreId    Int
  createdAt          DateTime   @db.Timestamptz(6)
  updatedAt          DateTime   @db.Timestamptz(6)
  CostCentre         CostCentre @relation(fields: [tripeeCostCentreId], references: [id], onDelete: Cascade)
}

model TripeeMobJustify {
  id              Int      @id @default(autoincrement())
  tripeeJustifyId Int
  mobJustifyId    Int
  createdAt       DateTime @db.Timestamptz(6)
  updatedAt       DateTime @db.Timestamptz(6)
  Justify         Justify  @relation(fields: [tripeeJustifyId], references: [id], onDelete: Cascade)
}

model TripeeMobProject {
  id              Int      @id @default(autoincrement())
  tripeeProjectId Int
  mobProjectId    Int
  createdAt       DateTime @db.Timestamptz(6)
  updatedAt       DateTime @db.Timestamptz(6)
  Project         Project  @relation(fields: [tripeeProjectId], references: [id], onDelete: Cascade)
}

model TripeeMobUser {
  id           Int      @id @default(autoincrement())
  tripeeUserId Int      @unique(map: "uq_tripeemobuser_tripeeuserid")
  mobUserId    Int      @unique(map: "uq_tripeemobuser_mobuserid")
  createdAt    DateTime @db.Timestamptz(6)
  updatedAt    DateTime @db.Timestamptz(6)
  User         User     @relation(fields: [tripeeUserId], references: [id], onDelete: Cascade)
}

model User {
  id                                Int              @id @default(autoincrement())
  companyId                         Int
  PolicyId                          Int?
  supervisorId                      Int?
  name                              String           @db.VarChar(255)
  email                             String           @unique @db.VarChar(255)
  phone                             String?          @db.VarChar(255)
  cellphone                         String?          @db.VarChar(255)
  externalId                        String?          @db.VarChar(255)
  cpf                               String?          @db.VarChar(255)
  occupation                        String?          @db.VarChar(255)
  status                            Int?
  role                              Int?
  firstAccessAt                     DateTime?        @db.Timestamptz(6)
  LastAccessAt                      DateTime?        @db.Timestamptz(6)
  resetPasswordAt                   DateTime?        @db.Timestamptz(6)
  createdAt                         DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                         DateTime         @default(now()) @db.Timestamptz(6)
  firebase_token                    String?          @db.VarChar
  resetPassword                     Boolean          @default(false)
  prioritized_user                  Boolean?         @default(false)
  request_third_party               Boolean          @default(false)
  Company_Company_responsibleToUser Company[]        @relation("Company_responsibleToUser")
  CostCentre                        CostCentre[]
  Favorites                         Favorites[]
  SelfRegisterLog                   SelfRegisterLog?
  TripeeMobUser                     TripeeMobUser?
  Policy                            Policy?          @relation(fields: [PolicyId], references: [id], onDelete: Cascade)
  Company_User_companyIdToCompany   Company          @relation("User_companyIdToCompany", fields: [companyId], references: [id], onDelete: Cascade)
  Roles                             Roles?           @relation(fields: [role], references: [id], onDelete: Cascade)
  User                              User?            @relation("UserToUser", fields: [supervisorId], references: [id], onDelete: Cascade)
  other_User                        User[]           @relation("UserToUser")
  UserAdminPages                    UserAdminPages[]
  UserCostCentre                    UserCostCentre[]
  feedback                          feedback[]
}

model UserAdminPages {
  id          String     @id(map: "PK_user_admin_page") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      Int
  adminPageId String     @db.Uuid
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(6)
  AdminPages  AdminPages @relation(fields: [adminPageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_admin_page_admin_page_id")
  User        User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_admin_page_user_id")

  @@unique([userId, adminPageId])
}

model UserCostCentre {
  id           Int        @id @default(autoincrement())
  userId       Int
  costCentreId Int
  createdAt    DateTime   @db.Timestamptz(6)
  updatedAt    DateTime   @db.Timestamptz(6)
  CostCentre   CostCentre @relation(fields: [costCentreId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserTripeeAdmin {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar
  email String @unique @db.VarChar
}

model feedback {
  id               Int      @id(map: "feedback_pk") @default(autoincrement())
  message          String   @db.VarChar(1000)
  subject          String   @db.VarChar(150)
  user_id          Int
  latitude         Float?
  longitude        Float?
  platform         String   @db.VarChar(1000)
  platform_version String   @db.VarChar(1000)
  app_version      String   @db.VarChar(1000)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @db.Timestamptz(6)
  User             User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "feedback_fk")
}

model loft_access_control {
  id               Int     @id(map: "pk_loft_access_control") @default(autoincrement())
  codigo           String  @db.VarChar(255)
  hora             String? @db.VarChar(255)
  nome_do_usuario  String? @db.VarChar(255)
  cpf              String? @db.VarChar(255)
  grupo            String? @db.VarChar(255)
  empresa          String? @db.VarChar(255)
  departamento     String? @db.VarChar(255)
  empresa_visitada String? @db.VarChar(255)
  autorizacao      String? @db.VarChar(255)
  detalhes         String? @db.VarChar(255)
  matricula        String? @db.VarChar(255)
  dispositivo      String? @db.VarChar(255)
  area             String? @db.VarChar(255)
  operador         String? @db.VarChar(255)
}

model loft_access_control_guest {
  id                    Int       @id(map: "pk_loft_access_control_guest") @default(autoincrement())
  entry_id              BigInt?
  name                  String?   @db.VarChar(255)
  company_name          String?   @db.VarChar(255)
  location_name         String?   @db.VarChar(255)
  email                 String?   @db.VarChar(255)
  entry_approval_status String?   @db.VarChar(255)
  flow_name             String?   @db.VarChar(255)
  invite_status         String?   @db.VarChar(255)
  private_notes         String?   @db.VarChar(255)
  group_name            String?   @db.VarChar(255)
  host                  String?   @db.VarChar(255)
  location_timezone     String?   @db.VarChar(255)
  sign_in_time          DateTime? @db.Timestamptz(6)
  legal_docs            String?   @db.VarChar(255)
  sign_out_time         DateTime? @db.Timestamptz(6)
  security              String?   @db.VarChar(255)
  phone_number          String?   @db.VarChar(255)
  desk                  String?   @db.VarChar(255)
  floor                 String?   @db.VarChar(255)
  neighborhood          String?   @db.VarChar(255)
  empresa               String?   @db.VarChar(255)
  falar_com             String?   @db.VarChar(255)
  falar_com_2           String?   @db.VarChar(255)
  rg                    String?   @db.VarChar(255)
  rg_2                  String?   @db.VarChar(255)
}

model loft_users {
  id            Int     @id(map: "pk_loft_users") @default(autoincrement())
  empresa       String  @db.VarChar(255)
  matricula     String? @db.VarChar(255)
  nome          String? @db.VarChar(255)
  cpf           String? @db.VarChar(255)
  email         String? @unique(map: "uq_loft_users_email") @db.VarChar(255)
  area          String? @db.VarChar(255)
  subarea       String? @db.VarChar(255)
  alocacao      String? @db.VarChar(255)
  lider         String? @db.VarChar(255)
  execao_tech   String? @db.VarChar(255)
  escritorio    String? @db.VarChar(255)
  empresa_new   String? @db.VarChar
  matricula_new String? @db.VarChar
  nome_new      String? @db.VarChar
  cpf_new       String? @db.VarChar
  area_new      String? @db.VarChar
  subarea_new   String? @db.VarChar
  alocacao_new  String? @db.VarChar
  cdc           String? @db.VarChar
  segmentacao   String? @db.VarChar
}

model wpp_configurations {
  id                   Int      @id(map: "PK_9c3f2911fadc8e54204651a5aed") @default(autoincrement())
  CompanyId            Int
  InstanceId           Int
  FirstMessage         String
  EstimateMessage      String
  OpenRideMessage      String
  ErrorMessage         String
  NotUnderstandMessage String
  createdAt            DateTime @default(now()) @db.Timestamp(6)
  updatedAt            DateTime @default(now()) @db.Timestamp(6)
}

model wpp_instances {
  id         Int      @id(map: "PK_d30bb77029dbf952ba2fa394e61") @default(autoincrement())
  ProviderId Int
  Name       String
  Provider   String
  Phone      String
  Status     String
  CompanyId  Int
  Token      String
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @db.Timestamp(6)
}

model wpp_messages {
  id          Int      @id(map: "PK_6ddaa199b61aca9f48574bd1f06") @default(autoincrement())
  InstanceId  Int
  CompanyId   Int
  UserId      Int
  Phone       String
  MessageType String
  SessionId   Int
  Status      Int      @default(0)
  Content     Json
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @db.Timestamp(6)
}

model wpp_sessions {
  id              Int       @id(map: "PK_e742176fce1bc14742a66db9d88") @default(autoincrement())
  InstanceId      Int
  CompanyId       Int?
  UserId          Int?
  EstimatedId     Int?
  RiderId         Int?
  Phone           String    @unique(map: "UQ_9898460cb1fd13a49a19c58f4fd")
  Status          String?
  Manual          Boolean   @default(false)
  TokenJwt        String?
  RefreshToken    String?
  EstimatedAt     DateTime? @db.Timestamp(6)
  RiderAt         DateTime? @db.Timestamp(6)
  FromLocation    String?
  ToLocation      String?
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @default(now()) @db.Timestamp(6)
  SessionId       String    @unique(map: "UQ_3e34ac59e430227a46adc29e95e") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ExpiresIn       DateTime? @db.Timestamp(6)
  Estimates       Json?     @db.Json
  FromCoordinates Json?     @db.Json
  ToCoordinates   Json?     @db.Json
}

model wpp_status {
  id         Int      @id(map: "PK_eef99790a0108ed0ee7117e39dd") @default(autoincrement())
  Type       String
  MessageId  String
  InstanceId BigInt
  Chat       String
  Sender     String
  FromMe     Boolean
  TimesTamp  String
  Status     Json     @db.Json
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @db.Timestamp(6)
}

model wpp_tickets {
  id        Int      @id(map: "PK_749f63b16c616e35dbd3a5e4f98") @default(autoincrement())
  SessionId String
  CompanyId Int
  UserId    Int
  AgentId   Int
  Status    String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
}

model notification_applications {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                       String
  api_key                    String                       @unique
  version_status             ApplicationVersionStatus
  refresh_api_key            String?
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  notification_notifications notification_notifications[]

  @@index([api_key], map: "idx_app_api_key")
  @@index([name], map: "idx_app_name")
}

model notification_logs {
  id                         String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  error                      String
  message                    String
  type                       TypeLog
  status_code                Int?
  timestamp                  DateTime?                  @default(now()) @db.Timestamptz(6)
  retry_count                Int?
  notification_id            String                     @db.Uuid
  created_at                 DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                  @default(now()) @db.Timestamptz(6)
  notification_notifications notification_notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_notification")

  @@index([notification_id], map: "idx_log_notification_id")
  @@index([status_code], map: "idx_log_status_code")
  @@index([type], map: "idx_log_type")
}

model notification_notifications {
  id                        String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                      TypeNotification
  receipts                  String[]
  title                     String
  body                      String
  scheduled_at              DateTime?                 @db.Timestamptz(6)
  sendt_at                  DateTime?                 @db.Timestamptz(6)
  application_id            String                    @db.Uuid
  re_scheduled_at           DateTime?                 @db.Timestamptz(6)
  status                    NotificationStatus
  created_at                DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                 @default(now()) @db.Timestamptz(6)
  notification_logs         notification_logs[]
  notification_applications notification_applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notification_application")

  @@index([application_id], map: "idx_notification_application_id")
  @@index([status], map: "idx_notification_status")
  @@index([type], map: "idx_notification_type")
}

enum ApplicationVersionStatus {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum TypeLog {
  ERROR
  WARNING
  INFO
}

enum TypeNotification {
  EMAIL
  SMS
  PUSH
  DISCORD
  SLACK
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELED
  RE_SCHEDULED
  ScHEDULED
}
