generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model notification_applications {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                       String
  api_key                    String                       @unique
  version_status             ApplicationVersionStatus
  refresh_api_key            String?
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  notification_notifications notification_notifications[]

  @@index([api_key], map: "idx_app_api_key")
  @@index([name], map: "idx_app_name")
}

model notification_logs {
  id                         String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  error                      String
  message                    String
  type                       TypeLog
  status_code                Int?
  timestamp                  DateTime?                  @default(now()) @db.Timestamptz(6)
  retry_count                Int?
  notification_id            String                     @db.Uuid
  created_at                 DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                  @default(now()) @db.Timestamptz(6)
  notification_notifications notification_notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_notification")

  @@index([notification_id], map: "idx_log_notification_id")
  @@index([status_code], map: "idx_log_status_code")
  @@index([type], map: "idx_log_type")
}

model notification_notifications {
  id                        String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                      TypeNotification
  receipts                  String[]
  title                     String
  body                      String
  scheduled_at              DateTime?                 @db.Timestamptz(6)
  sendt_at                  DateTime?                 @db.Timestamptz(6)
  application_id            String                    @db.Uuid
  re_scheduled_at           DateTime?                 @db.Timestamptz(6)
  status                    NotificationStatus
  created_at                DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                 @default(now()) @db.Timestamptz(6)
  notification_logs         notification_logs[]
  notification_applications notification_applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notification_application")

  @@index([application_id], map: "idx_notification_application_id")
  @@index([status], map: "idx_notification_status")
  @@index([type], map: "idx_notification_type")
}

enum ApplicationVersionStatus {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum TypeLog {
  ERROR
  WARNING
  INFO
}

enum TypeNotification {
  EMAIL
  SMS
  PUSH
  DISCORD
  SLACK
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELED
  RE_SCHEDULED
  ScHEDULED
}
